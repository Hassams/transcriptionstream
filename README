
# Transcription Stream 11/2023
#### [Visit Transcription Stream](https://transcription.stream)

## Overview
This project sets up an SSH and web-accessible platform for transcribing and diarizing audio files. When files are dropped via SSH into the `transcribe` or `diarize` folders, they undergo their respective processes. The output is placed in a dated folder, named after the audio file, within the `transcribed` directory. Similarly, files uploaded via the `ts-web` interface are processed and stored in the same way.

**Note: Requires an NVIDIA GPU.**

## Build and Run Instructions

### Creating Volumes
- **Transcription Stream Volume:**
  ```shell
  docker volume create --name=transcriptionstream
  ```

### Building Images
- **ts-web Image:** (Very small, fast, minimal build)
  ```shell
  docker build -t ts-web:latest .
  ```
- **ts-gpu Image:** (Large build, approximately 13.8GB, containing necessary offline models)
  ```shell
  docker build -t ts-gpu:latest .
  ```

### Running the Service
- Execute the service using `docker-compose`. The console will display updates from running jobs and logs from `ts-web`:
  ```shell
  docker-compose -p transcriptionstream up
  ```

## Important Notes

### Ports
- SSH: 22222
- HTTP: 5006

### SSH Server Access
- **Port:** 22222
- **User:** `transcriptionstream`
- **Password:** `nomoresaastax`
- **Usage:** Place audio files in `transcribe` for transcription or `diarize` for diarization. Processed files appear in `transcribed`.

### Web Interface Access
- **URL:** [http://dockerip:5006](http://dockerip:5006)
- **Features:**
  - Audio file upload/download
  - Task completion alerts with actionable links
  - HTML5 web player with speed control and transcription highlighting
  - Time-synced transcription scrubbing/scrolling

**Warning:** This is an example code for demonstration and should not be used in production environments.

### Customization and Troubleshooting
- Change the password for `transcriptionstream` in the `ts-gpu` Dockerfile.
- Update the secret in `ts-web` app.py.
- The transcription option uses `whisperx`, which was preferable to OpenAI's Whisper for compatibility reasons. Note that the raw text output for transcriptions might not display correctly in the console and `ts-web`.
- The `large-v2` model, not included in the initial build, might cause delays in the first transcription. You can either add a `RUN` line to the `ts-gpu` Dockerfile for including it or adjust `transcribe_example_d.sh` to use a different model.
